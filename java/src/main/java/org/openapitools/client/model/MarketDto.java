/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PairDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Market is a combination of marketVenue and pair
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T17:07:39.251663+02:00[Europe/Warsaw]")
public class MarketDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARKET_VENUE = "marketVenue";
  @SerializedName(SERIALIZED_NAME_MARKET_VENUE)
  private String marketVenue;

  public static final String SERIALIZED_NAME_PAIR_ID = "pairId";
  @SerializedName(SERIALIZED_NAME_PAIR_ID)
  private String pairId;

  public static final String SERIALIZED_NAME_PAIR = "pair";
  @SerializedName(SERIALIZED_NAME_PAIR)
  private PairDto pair;

  public MarketDto() {
  }

  public MarketDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public MarketDto marketVenue(String marketVenue) {
    
    this.marketVenue = marketVenue;
    return this;
  }

   /**
   * Market venue (unique identifier)
   * @return marketVenue
  **/
  @javax.annotation.Nonnull
  public String getMarketVenue() {
    return marketVenue;
  }


  public void setMarketVenue(String marketVenue) {
    this.marketVenue = marketVenue;
  }


  public MarketDto pairId(String pairId) {
    
    this.pairId = pairId;
    return this;
  }

   /**
   * Pair (unique identifier)
   * @return pairId
  **/
  @javax.annotation.Nonnull
  public String getPairId() {
    return pairId;
  }


  public void setPairId(String pairId) {
    this.pairId = pairId;
  }


  public MarketDto pair(PairDto pair) {
    
    this.pair = pair;
    return this;
  }

   /**
   * Get pair
   * @return pair
  **/
  @javax.annotation.Nullable
  public PairDto getPair() {
    return pair;
  }


  public void setPair(PairDto pair) {
    this.pair = pair;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketDto marketDto = (MarketDto) o;
    return Objects.equals(this.id, marketDto.id) &&
        Objects.equals(this.marketVenue, marketDto.marketVenue) &&
        Objects.equals(this.pairId, marketDto.pairId) &&
        Objects.equals(this.pair, marketDto.pair);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, marketVenue, pairId, pair);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    marketVenue: ").append(toIndentedString(marketVenue)).append("\n");
    sb.append("    pairId: ").append(toIndentedString(pairId)).append("\n");
    sb.append("    pair: ").append(toIndentedString(pair)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("marketVenue");
    openapiFields.add("pairId");
    openapiFields.add("pair");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("marketVenue");
    openapiRequiredFields.add("pairId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketDto is not found in the empty JSON string", MarketDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MarketDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarketDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("marketVenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketVenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketVenue").toString()));
      }
      if (!jsonObj.get("pairId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pairId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pairId").toString()));
      }
      // validate the optional field `pair`
      if (jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull()) {
        PairDto.validateJsonElement(jsonObj.get("pair"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketDto>() {
           @Override
           public void write(JsonWriter out, MarketDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketDto
  * @throws IOException if the JSON string is invalid with respect to MarketDto
  */
  public static MarketDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketDto.class);
  }

 /**
  * Convert an instance of MarketDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

