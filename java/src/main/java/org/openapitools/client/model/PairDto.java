/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pair is a combination of base and quote currencies; the value of one currency being quoted against the other
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T17:07:39.251663+02:00[Europe/Warsaw]")
public class PairDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private String base;

  public static final String SERIALIZED_NAME_FUTURE_DELIVERY_DATE = "futureDeliveryDate";
  @SerializedName(SERIALIZED_NAME_FUTURE_DELIVERY_DATE)
  private String futureDeliveryDate;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private String optionType;

  public static final String SERIALIZED_NAME_OPTION_EXPIRATION = "optionExpiration";
  @SerializedName(SERIALIZED_NAME_OPTION_EXPIRATION)
  private String optionExpiration;

  public static final String SERIALIZED_NAME_OPTION_STRIKE = "optionStrike";
  @SerializedName(SERIALIZED_NAME_OPTION_STRIKE)
  private String optionStrike;

  public static final String SERIALIZED_NAME_OPTION_DELIVERY_DATE = "optionDeliveryDate";
  @SerializedName(SERIALIZED_NAME_OPTION_DELIVERY_DATE)
  private String optionDeliveryDate;

  public PairDto() {
  }

  public PairDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PairDto assetType(String assetType) {
    
    this.assetType = assetType;
    return this;
  }

   /**
   * The type of asset. Spot, future, and option are the main asset types we are covering with financial data. Futures and options are derivatives
   * @return assetType
  **/
  @javax.annotation.Nonnull
  public String getAssetType() {
    return assetType;
  }


  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }


  public PairDto symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The first listed currency of a currency pair, they are usually cryptocurrency tokens. The most diverse parameter
   * @return symbol
  **/
  @javax.annotation.Nonnull
  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public PairDto base(String base) {
    
    this.base = base;
    return this;
  }

   /**
   * The second listed currency in the pair, also known as quote currency or counter currency. Usually fiat, stablecoin, or more popular crypto like BTC and ETH. The less diverse parameter
   * @return base
  **/
  @javax.annotation.Nonnull
  public String getBase() {
    return base;
  }


  public void setBase(String base) {
    this.base = base;
  }


  public PairDto futureDeliveryDate(String futureDeliveryDate) {
    
    this.futureDeliveryDate = futureDeliveryDate;
    return this;
  }

   /**
   * The last day that a future contract is valid
   * @return futureDeliveryDate
  **/
  @javax.annotation.Nullable
  public String getFutureDeliveryDate() {
    return futureDeliveryDate;
  }


  public void setFutureDeliveryDate(String futureDeliveryDate) {
    this.futureDeliveryDate = futureDeliveryDate;
  }


  public PairDto optionType(String optionType) {
    
    this.optionType = optionType;
    return this;
  }

   /**
   * Refers to the holder’s right to sell/buy a number of assets within a specific period of time at a certain price. This takes two values:put for sell and call for buy
   * @return optionType
  **/
  @javax.annotation.Nullable
  public String getOptionType() {
    return optionType;
  }


  public void setOptionType(String optionType) {
    this.optionType = optionType;
  }


  public PairDto optionExpiration(String optionExpiration) {
    
    this.optionExpiration = optionExpiration;
    return this;
  }

   /**
   * The options’ lifespan. This takes two values:eu (may be exercised only at the expiration date) and am (may be exercised at any time before the expiration date)
   * @return optionExpiration
  **/
  @javax.annotation.Nullable
  public String getOptionExpiration() {
    return optionExpiration;
  }


  public void setOptionExpiration(String optionExpiration) {
    this.optionExpiration = optionExpiration;
  }


  public PairDto optionStrike(String optionStrike) {
    
    this.optionStrike = optionStrike;
    return this;
  }

   /**
   * The price at which option contract can be exercised
   * @return optionStrike
  **/
  @javax.annotation.Nullable
  public String getOptionStrike() {
    return optionStrike;
  }


  public void setOptionStrike(String optionStrike) {
    this.optionStrike = optionStrike;
  }


  public PairDto optionDeliveryDate(String optionDeliveryDate) {
    
    this.optionDeliveryDate = optionDeliveryDate;
    return this;
  }

   /**
   * The last day that an option is valid
   * @return optionDeliveryDate
  **/
  @javax.annotation.Nullable
  public String getOptionDeliveryDate() {
    return optionDeliveryDate;
  }


  public void setOptionDeliveryDate(String optionDeliveryDate) {
    this.optionDeliveryDate = optionDeliveryDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PairDto pairDto = (PairDto) o;
    return Objects.equals(this.id, pairDto.id) &&
        Objects.equals(this.assetType, pairDto.assetType) &&
        Objects.equals(this.symbol, pairDto.symbol) &&
        Objects.equals(this.base, pairDto.base) &&
        Objects.equals(this.futureDeliveryDate, pairDto.futureDeliveryDate) &&
        Objects.equals(this.optionType, pairDto.optionType) &&
        Objects.equals(this.optionExpiration, pairDto.optionExpiration) &&
        Objects.equals(this.optionStrike, pairDto.optionStrike) &&
        Objects.equals(this.optionDeliveryDate, pairDto.optionDeliveryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, assetType, symbol, base, futureDeliveryDate, optionType, optionExpiration, optionStrike, optionDeliveryDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PairDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    futureDeliveryDate: ").append(toIndentedString(futureDeliveryDate)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    optionExpiration: ").append(toIndentedString(optionExpiration)).append("\n");
    sb.append("    optionStrike: ").append(toIndentedString(optionStrike)).append("\n");
    sb.append("    optionDeliveryDate: ").append(toIndentedString(optionDeliveryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("assetType");
    openapiFields.add("symbol");
    openapiFields.add("base");
    openapiFields.add("futureDeliveryDate");
    openapiFields.add("optionType");
    openapiFields.add("optionExpiration");
    openapiFields.add("optionStrike");
    openapiFields.add("optionDeliveryDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("assetType");
    openapiRequiredFields.add("symbol");
    openapiRequiredFields.add("base");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PairDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PairDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PairDto is not found in the empty JSON string", PairDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PairDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PairDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PairDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (!jsonObj.get("base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base").toString()));
      }
      if ((jsonObj.get("futureDeliveryDate") != null && !jsonObj.get("futureDeliveryDate").isJsonNull()) && !jsonObj.get("futureDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `futureDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("futureDeliveryDate").toString()));
      }
      if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull()) && !jsonObj.get("optionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionType").toString()));
      }
      if ((jsonObj.get("optionExpiration") != null && !jsonObj.get("optionExpiration").isJsonNull()) && !jsonObj.get("optionExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionExpiration").toString()));
      }
      if ((jsonObj.get("optionStrike") != null && !jsonObj.get("optionStrike").isJsonNull()) && !jsonObj.get("optionStrike").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionStrike` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionStrike").toString()));
      }
      if ((jsonObj.get("optionDeliveryDate") != null && !jsonObj.get("optionDeliveryDate").isJsonNull()) && !jsonObj.get("optionDeliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionDeliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionDeliveryDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PairDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PairDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PairDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PairDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PairDto>() {
           @Override
           public void write(JsonWriter out, PairDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PairDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PairDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PairDto
  * @throws IOException if the JSON string is invalid with respect to PairDto
  */
  public static PairDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PairDto.class);
  }

 /**
  * Convert an instance of PairDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

