/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BestOfferDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics associated with object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T17:07:39.251663+02:00[Europe/Warsaw]")
public class ObMetricsDto {
  public static final String SERIALIZED_NAME_BEST_ASK = "bestAsk";
  @SerializedName(SERIALIZED_NAME_BEST_ASK)
  private BestOfferDto bestAsk;

  public static final String SERIALIZED_NAME_BEST_BID = "bestBid";
  @SerializedName(SERIALIZED_NAME_BEST_BID)
  private BestOfferDto bestBid;

  public static final String SERIALIZED_NAME_VWMP = "vwmp";
  @SerializedName(SERIALIZED_NAME_VWMP)
  private String vwmp;

  public ObMetricsDto() {
  }

  public ObMetricsDto bestAsk(BestOfferDto bestAsk) {
    
    this.bestAsk = bestAsk;
    return this;
  }

   /**
   * Get bestAsk
   * @return bestAsk
  **/
  @javax.annotation.Nullable
  public BestOfferDto getBestAsk() {
    return bestAsk;
  }


  public void setBestAsk(BestOfferDto bestAsk) {
    this.bestAsk = bestAsk;
  }


  public ObMetricsDto bestBid(BestOfferDto bestBid) {
    
    this.bestBid = bestBid;
    return this;
  }

   /**
   * Get bestBid
   * @return bestBid
  **/
  @javax.annotation.Nullable
  public BestOfferDto getBestBid() {
    return bestBid;
  }


  public void setBestBid(BestOfferDto bestBid) {
    this.bestBid = bestBid;
  }


  public ObMetricsDto vwmp(String vwmp) {
    
    this.vwmp = vwmp;
    return this;
  }

   /**
   * Get vwmp
   * @return vwmp
  **/
  @javax.annotation.Nonnull
  public String getVwmp() {
    return vwmp;
  }


  public void setVwmp(String vwmp) {
    this.vwmp = vwmp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObMetricsDto obMetricsDto = (ObMetricsDto) o;
    return Objects.equals(this.bestAsk, obMetricsDto.bestAsk) &&
        Objects.equals(this.bestBid, obMetricsDto.bestBid) &&
        Objects.equals(this.vwmp, obMetricsDto.vwmp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestAsk, bestBid, vwmp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObMetricsDto {\n");
    sb.append("    bestAsk: ").append(toIndentedString(bestAsk)).append("\n");
    sb.append("    bestBid: ").append(toIndentedString(bestBid)).append("\n");
    sb.append("    vwmp: ").append(toIndentedString(vwmp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestAsk");
    openapiFields.add("bestBid");
    openapiFields.add("vwmp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vwmp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObMetricsDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObMetricsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObMetricsDto is not found in the empty JSON string", ObMetricsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ObMetricsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObMetricsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObMetricsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bestAsk`
      if (jsonObj.get("bestAsk") != null && !jsonObj.get("bestAsk").isJsonNull()) {
        BestOfferDto.validateJsonElement(jsonObj.get("bestAsk"));
      }
      // validate the optional field `bestBid`
      if (jsonObj.get("bestBid") != null && !jsonObj.get("bestBid").isJsonNull()) {
        BestOfferDto.validateJsonElement(jsonObj.get("bestBid"));
      }
      if (!jsonObj.get("vwmp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vwmp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vwmp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObMetricsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObMetricsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObMetricsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObMetricsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ObMetricsDto>() {
           @Override
           public void write(JsonWriter out, ObMetricsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObMetricsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObMetricsDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObMetricsDto
  * @throws IOException if the JSON string is invalid with respect to ObMetricsDto
  */
  public static ObMetricsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObMetricsDto.class);
  }

 /**
  * Convert an instance of ObMetricsDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

